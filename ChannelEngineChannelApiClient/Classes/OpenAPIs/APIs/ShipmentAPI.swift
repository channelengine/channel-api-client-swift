//
// ShipmentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ShipmentAPI {
    /**
     Get Shipments.
     
     - parameter createdSince: (query) Deprecated, please use FromDate instead. (optional)
     - parameter statuses: (query) Deprecated, shipment status(es) to filter on. (optional)
     - parameter fromDate: (query) Filter on the creation date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the creation date, until this date. This date is exclusive. (optional)
     - parameter channelOrderNos: (query) Filter on the unique references (ids) as used by the channel. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentIndex(createdSince: Date? = nil, statuses: [ShipmentStatus]? = nil, fromDate: Date? = nil, toDate: Date? = nil, channelOrderNos: [String]? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = ChannelEngineChannelApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: CollectionOfChannelShipmentResponse?, _ error: Error?) -> Void)) {
        shipmentIndexWithRequestBuilder(createdSince: createdSince, statuses: statuses, fromDate: fromDate, toDate: toDate, channelOrderNos: channelOrderNos, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Shipments.
     - GET /v2/shipments
     - Gets all shipments created since the supplied date with status CLOSED.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter createdSince: (query) Deprecated, please use FromDate instead. (optional)
     - parameter statuses: (query) Deprecated, shipment status(es) to filter on. (optional)
     - parameter fromDate: (query) Filter on the creation date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the creation date, until this date. This date is exclusive. (optional)
     - parameter channelOrderNos: (query) Filter on the unique references (ids) as used by the channel. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - returns: RequestBuilder<CollectionOfChannelShipmentResponse> 
     */
    open class func shipmentIndexWithRequestBuilder(createdSince: Date? = nil, statuses: [ShipmentStatus]? = nil, fromDate: Date? = nil, toDate: Date? = nil, channelOrderNos: [String]? = nil, page: Int? = nil) -> RequestBuilder<CollectionOfChannelShipmentResponse> {
        let path = "/v2/shipments"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "createdSince": createdSince?.encodeToJSON(),
            "statuses": statuses?.encodeToJSON(),
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "channelOrderNos": channelOrderNos?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CollectionOfChannelShipmentResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Download shipping label.
     
     - parameter merchantShipmentNo: (path) The unique shipment reference as used by the merchant. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentShippingLabel(merchantShipmentNo: String, apiResponseQueue: DispatchQueue = ChannelEngineChannelApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        shipmentShippingLabelWithRequestBuilder(merchantShipmentNo: merchantShipmentNo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download shipping label.
     - GET /v2/orders/{merchantShipmentNo}/shippinglabel
     - Downloads the shipping label for the shipment
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantShipmentNo: (path) The unique shipment reference as used by the merchant. 
     - returns: RequestBuilder<URL> 
     */
    open class func shipmentShippingLabelWithRequestBuilder(merchantShipmentNo: String) -> RequestBuilder<URL> {
        var path = "/v2/orders/{merchantShipmentNo}/shippinglabel"
        let merchantShipmentNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantShipmentNo))"
        let merchantShipmentNoPostEscape = merchantShipmentNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantShipmentNo}", with: merchantShipmentNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
