//
// ChannelOrderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChannelOrderRequest: Codable, Hashable {

    public var billingAddress: ChannelAddressRequest
    public var shippingAddress: ChannelAddressRequest
    /** The unique order reference used by the Channel. */
    public var channelOrderNo: String
    /** Optional. Is a business order (default value is false).  If not provided the VAT Number will be checked. If a VAT Number is found, IsBusinessOrder will be set to true.  No VAT will be calculated when set to true. */
    public var isBusinessOrder: Bool?
    /** Optional. Is the MPN used as key for the product (default value is false). */
    public var keyIsMerchantProductNo: Bool?
    /** The order lines. */
    public var lines: [ChannelOrderLineRequest]
    /** The customer's telephone number. */
    public var phone: String?
    /** The customer's email. */
    public var email: String
    /** Optional. A company's chamber of commerce number. */
    public var companyRegistrationNo: String?
    /** Optional. A company's VAT number. */
    public var vatNo: String?
    /** The payment method used on the order. */
    public var paymentMethod: String?
    /** Reference or transaction id for the payment */
    public var paymentReferenceNo: String?
    /** The shipping fee including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering). */
    public var shippingCostsInclVat: Double
    /** The currency code for the amounts of the order. */
    public var currencyCode: String
    /** The date the order was created at the channel. */
    public var orderDate: Date
    /** The unique customer reference used by the channel. */
    public var channelCustomerNo: String?
    /** Extra data on the order. */
    public var extraData: [String: String]?

    public init(billingAddress: ChannelAddressRequest, shippingAddress: ChannelAddressRequest, channelOrderNo: String, isBusinessOrder: Bool? = nil, keyIsMerchantProductNo: Bool? = nil, lines: [ChannelOrderLineRequest], phone: String? = nil, email: String, companyRegistrationNo: String? = nil, vatNo: String? = nil, paymentMethod: String? = nil, paymentReferenceNo: String? = nil, shippingCostsInclVat: Double, currencyCode: String, orderDate: Date, channelCustomerNo: String? = nil, extraData: [String: String]? = nil) {
        self.billingAddress = billingAddress
        self.shippingAddress = shippingAddress
        self.channelOrderNo = channelOrderNo
        self.isBusinessOrder = isBusinessOrder
        self.keyIsMerchantProductNo = keyIsMerchantProductNo
        self.lines = lines
        self.phone = phone
        self.email = email
        self.companyRegistrationNo = companyRegistrationNo
        self.vatNo = vatNo
        self.paymentMethod = paymentMethod
        self.paymentReferenceNo = paymentReferenceNo
        self.shippingCostsInclVat = shippingCostsInclVat
        self.currencyCode = currencyCode
        self.orderDate = orderDate
        self.channelCustomerNo = channelCustomerNo
        self.extraData = extraData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case billingAddress = "BillingAddress"
        case shippingAddress = "ShippingAddress"
        case channelOrderNo = "ChannelOrderNo"
        case isBusinessOrder = "IsBusinessOrder"
        case keyIsMerchantProductNo = "KeyIsMerchantProductNo"
        case lines = "Lines"
        case phone = "Phone"
        case email = "Email"
        case companyRegistrationNo = "CompanyRegistrationNo"
        case vatNo = "VatNo"
        case paymentMethod = "PaymentMethod"
        case paymentReferenceNo = "PaymentReferenceNo"
        case shippingCostsInclVat = "ShippingCostsInclVat"
        case currencyCode = "CurrencyCode"
        case orderDate = "OrderDate"
        case channelCustomerNo = "ChannelCustomerNo"
        case extraData = "ExtraData"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(billingAddress, forKey: .billingAddress)
        try container.encode(shippingAddress, forKey: .shippingAddress)
        try container.encode(channelOrderNo, forKey: .channelOrderNo)
        try container.encodeIfPresent(isBusinessOrder, forKey: .isBusinessOrder)
        try container.encodeIfPresent(keyIsMerchantProductNo, forKey: .keyIsMerchantProductNo)
        try container.encode(lines, forKey: .lines)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(companyRegistrationNo, forKey: .companyRegistrationNo)
        try container.encodeIfPresent(vatNo, forKey: .vatNo)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(paymentReferenceNo, forKey: .paymentReferenceNo)
        try container.encode(shippingCostsInclVat, forKey: .shippingCostsInclVat)
        try container.encode(currencyCode, forKey: .currencyCode)
        try container.encode(orderDate, forKey: .orderDate)
        try container.encodeIfPresent(channelCustomerNo, forKey: .channelCustomerNo)
        try container.encodeIfPresent(extraData, forKey: .extraData)
    }
}

