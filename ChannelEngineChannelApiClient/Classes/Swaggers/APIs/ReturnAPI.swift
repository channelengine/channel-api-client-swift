//
// ReturnAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ReturnAPI {
    /**
     Create Return
     
     - parameter model: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnDeclareForChannel(model: ChannelReturnRequest, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        returnDeclareForChannelWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create Return
     - POST /v2/returns/channel
     - Mark (part of) an order as returned by the customer.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "LogId" : 6,
  "Success" : true
}}]
     
     - parameter model: (body)  

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func returnDeclareForChannelWithRequestBuilder(model: ChannelReturnRequest) -> RequestBuilder<ApiResponse> {
        let path = "/v2/returns/channel"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter statuses
     */
    public enum Statuses_returnGetDeclaredByMerchant: String { 
        case inProgress = "IN_PROGRESS"
        case received = "RECEIVED"
        case cancelled = "CANCELLED"
    }

    /**
     * enum for parameter reasons
     */
    public enum Reasons_returnGetDeclaredByMerchant: String { 
        case productDefect = "PRODUCT_DEFECT"
        case productUnsatisfactory = "PRODUCT_UNSATISFACTORY"
        case wrongProduct = "WRONG_PRODUCT"
        case tooManyProducts = "TOO_MANY_PRODUCTS"
        case refused = "REFUSED"
        case refusedDamaged = "REFUSED_DAMAGED"
        case wrongAddress = "WRONG_ADDRESS"
        case notCollected = "NOT_COLLECTED"
        case wrongSize = "WRONG_SIZE"
        case other = "OTHER"
    }

    /**
     Get Returns
     
     - parameter createdSince: (query) Deprecated, please use FromDate instead. (optional)
     - parameter statuses: (query) Return status(es) to filter on (optional)
     - parameter reasons: (query) Return reason(s) to filter on (optional)
     - parameter fromDate: (query) Filter on the creation date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the creation date, until this date. This date is exclusive. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func returnGetDeclaredByMerchant(createdSince: Date? = nil, statuses: [String]? = nil, reasons: [String]? = nil, fromDate: Date? = nil, toDate: Date? = nil, page: Int? = nil, completion: @escaping ((_ data: CollectionOfChannelReturnResponse?,_ error: Error?) -> Void)) {
        returnGetDeclaredByMerchantWithRequestBuilder(createdSince: createdSince, statuses: statuses, reasons: reasons, fromDate: fromDate, toDate: toDate, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Returns
     - GET /v2/returns/channel
     - Get all returns created by the merchant. This call is supposed  to be used by channels. Merchants should use the 'GET /v2/returns/merchant'  call.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 2,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "ChannelOrderNo" : "ChannelOrderNo",
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 5.962133916683182377482808078639209270477294921875,
    "CustomerComment" : "CustomerComment",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "ChannelReturnNo" : "ChannelReturnNo",
    "Id" : 6,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "Lines" : [ {
      "Quantity" : 0,
      "ChannelProductNo" : "ChannelProductNo"
    }, {
      "Quantity" : 0,
      "ChannelProductNo" : "ChannelProductNo"
    } ],
    "RefundInclVat" : 1.46581298050294517310021547018550336360931396484375
  }, {
    "ChannelOrderNo" : "ChannelOrderNo",
    "MerchantComment" : "MerchantComment",
    "RefundExclVat" : 5.962133916683182377482808078639209270477294921875,
    "CustomerComment" : "CustomerComment",
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "ChannelReturnNo" : "ChannelReturnNo",
    "Id" : 6,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Reason" : "PRODUCT_DEFECT",
    "Lines" : [ {
      "Quantity" : 0,
      "ChannelProductNo" : "ChannelProductNo"
    }, {
      "Quantity" : 0,
      "ChannelProductNo" : "ChannelProductNo"
    } ],
    "RefundInclVat" : 1.46581298050294517310021547018550336360931396484375
  } ],
  "ItemsPerPage" : 7,
  "Count" : 5,
  "StatusCode" : 9,
  "LogId" : 3,
  "Success" : true
}}]
     
     - parameter createdSince: (query) Deprecated, please use FromDate instead. (optional)
     - parameter statuses: (query) Return status(es) to filter on (optional)
     - parameter reasons: (query) Return reason(s) to filter on (optional)
     - parameter fromDate: (query) Filter on the creation date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the creation date, until this date. This date is exclusive. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)

     - returns: RequestBuilder<CollectionOfChannelReturnResponse> 
     */
    open class func returnGetDeclaredByMerchantWithRequestBuilder(createdSince: Date? = nil, statuses: [String]? = nil, reasons: [String]? = nil, fromDate: Date? = nil, toDate: Date? = nil, page: Int? = nil) -> RequestBuilder<CollectionOfChannelReturnResponse> {
        let path = "/v2/returns/channel"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "createdSince": createdSince?.encodeToJSON(), 
            "statuses": statuses, 
            "reasons": reasons, 
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<CollectionOfChannelReturnResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
