//
// ProductAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ProductAPI {
    /**
     Acknowledge Product Data Changes
     
     - parameter changes: (body) The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productAcknowledgeDataChanges(changes: ChannelProcessedChangesRequest, completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        productAcknowledgeDataChangesWithRequestBuilder(changes: changes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Acknowledge Product Data Changes
     - POST /v2/products/data
     - This endpoint should be called after a call to GET 'v2/products/data'. After a call to  this endpoint ChannelEngine 'knows' which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST 'v2/products/data'.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the 'Updated' and 'Removed'  fields consist of ChannelReferences which are sent in a previous call  within the field 'Created'.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "LogId" : 6,
  "Success" : true
}}]
     
     - parameter changes: (body) The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;) 

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func productAcknowledgeDataChangesWithRequestBuilder(changes: ChannelProcessedChangesRequest) -> RequestBuilder<ApiResponse> {
        let path = "/v2/products/data"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changes)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Acknowledge Product Offer Changes
     
     - parameter changes: (body) The channel references of the updated products 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productAcknowledgeOfferChanges(changes: [String], completion: @escaping ((_ data: ApiResponse?,_ error: Error?) -> Void)) {
        productAcknowledgeOfferChangesWithRequestBuilder(changes: changes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Acknowledge Product Offer Changes
     - POST /v2/products/offers
     - After a call to GET 'v2/products/offers' this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see 'v2/products/data' and 'v2/products/data' for documentation.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "StatusCode" : 0,
  "LogId" : 6,
  "Success" : true
}}]
     
     - parameter changes: (body) The channel references of the updated products 

     - returns: RequestBuilder<ApiResponse> 
     */
    open class func productAcknowledgeOfferChangesWithRequestBuilder(changes: [String]) -> RequestBuilder<ApiResponse> {
        let path = "/v2/products/offers"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changes)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Product Data Changes
     
     - parameter maxCount: (query) Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productGetDataChanges(maxCount: Int? = nil, completion: @escaping ((_ data: SingleOfChannelProductChangesResponse?,_ error: Error?) -> Void)) {
        productGetDataChangesWithRequestBuilder(maxCount: maxCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Product Data Changes
     - GET /v2/products/data
     - Get all products which have changes since the post http call to POST 'v2/products/data'.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully 'v2/products/data' should  be called with the merchant references of the products which have been processed (see POST 'v2/products/data').   ChannelEnginewill save this information to make sure that the next call to GET 'v2/products/data' only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll 'v2/products/data' for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST 'v2/products/data'.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   'ChannelParentReference'.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : {
    "ToBeUpdated" : [ {
      "MSRP" : 5.962133916683182377482808078639209270477294921875,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.63737665663332876420099637471139430999755859375,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.46581298050294517310021547018550336360931396484375,
      "ShippingCost" : 2.3021358869347654518833223846741020679473876953125,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    }, {
      "MSRP" : 5.962133916683182377482808078639209270477294921875,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.63737665663332876420099637471139430999755859375,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.46581298050294517310021547018550336360931396484375,
      "ShippingCost" : 2.3021358869347654518833223846741020679473876953125,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    } ],
    "ToBeRemoved" : [ "ToBeRemoved", "ToBeRemoved" ],
    "ToBeCreated" : [ {
      "MSRP" : 5.962133916683182377482808078639209270477294921875,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.63737665663332876420099637471139430999755859375,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.46581298050294517310021547018550336360931396484375,
      "ShippingCost" : 2.3021358869347654518833223846741020679473876953125,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    }, {
      "MSRP" : 5.962133916683182377482808078639209270477294921875,
      "Description" : "Description",
      "Size" : "Size",
      "PurchasePrice" : 5.63737665663332876420099637471139430999755859375,
      "Url" : "Url",
      "Name" : "Name",
      "VatRateType" : "STANDARD",
      "ParentChannelProductNo" : "ParentChannelProductNo",
      "ExtraImageUrl9" : "ExtraImageUrl9",
      "ExtraImageUrl8" : "ExtraImageUrl8",
      "ExtraImageUrl7" : "ExtraImageUrl7",
      "ExtraImageUrl6" : "ExtraImageUrl6",
      "ExtraImageUrl5" : "ExtraImageUrl5",
      "Color" : "Color",
      "ExtraImageUrl4" : "ExtraImageUrl4",
      "ImageUrl" : "ImageUrl",
      "ManufacturerProductNumber" : "ManufacturerProductNumber",
      "ExtraData" : [ {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      }, {
        "Type" : "TEXT",
        "IsPublic" : true,
        "Value" : "Value",
        "Key" : "Key"
      } ],
      "Brand" : "Brand",
      "ShippingTime" : "ShippingTime",
      "Ean" : "Ean",
      "MappedFields" : {
        "key" : "MappedFields"
      },
      "Price" : 1.46581298050294517310021547018550336360931396484375,
      "ShippingCost" : 2.3021358869347654518833223846741020679473876953125,
      "ExtraImageUrl3" : "ExtraImageUrl3",
      "ExtraImageUrl2" : "ExtraImageUrl2",
      "ExtraImageUrl1" : "ExtraImageUrl1",
      "Id" : 0,
      "CategoryTrail" : "CategoryTrail",
      "Stock" : 6
    } ]
  },
  "StatusCode" : 7,
  "LogId" : 9,
  "Success" : true
}}]
     
     - parameter maxCount: (query) Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)

     - returns: RequestBuilder<SingleOfChannelProductChangesResponse> 
     */
    open class func productGetDataChangesWithRequestBuilder(maxCount: Int? = nil) -> RequestBuilder<SingleOfChannelProductChangesResponse> {
        let path = "/v2/products/data"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "maxCount": maxCount?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SingleOfChannelProductChangesResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Product Offer Changes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productGetOfferChanges(completion: @escaping ((_ data: CollectionOfChannelOfferResponse?,_ error: Error?) -> Void)) {
        productGetOfferChangesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Product Offer Changes
     - GET /v2/products/offers
     - GET 'v2/products/offers' and POST 'v2/products/offers' closely resemble GET 'v2/products/data' and POST 'v2/products/data'. See the 'v2/products/data'  endpoints for documentation. The difference between both endpoints is that 'v2/products/offers' only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apikey
     - examples: [{contentType=application/json, example={
  "TotalCount" : 5,
  "Message" : "Message",
  "ValidationErrors" : {
    "key" : [ "ValidationErrors", "ValidationErrors" ]
  },
  "Content" : [ {
    "Price" : 0.80082819046101150206595775671303272247314453125,
    "Stock" : 6,
    "ChannelProductNo" : "ChannelProductNo"
  }, {
    "Price" : 0.80082819046101150206595775671303272247314453125,
    "Stock" : 6,
    "ChannelProductNo" : "ChannelProductNo"
  } ],
  "ItemsPerPage" : 5,
  "Count" : 1,
  "StatusCode" : 2,
  "LogId" : 7,
  "Success" : true
}}]

     - returns: RequestBuilder<CollectionOfChannelOfferResponse> 
     */
    open class func productGetOfferChangesWithRequestBuilder() -> RequestBuilder<CollectionOfChannelOfferResponse> {
        let path = "/v2/products/offers"
        let URLString = ChannelEngineChannelApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<CollectionOfChannelOfferResponse>.Type = ChannelEngineChannelApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
